import numpy as npimport astropy.cosmology as cosmofrom astropy import units as ufrom astropy.coordinates import SkyCoordfrom scipy import stats as stimport astropy as astimport matplotlib.pyplot as pltimport timefrom math import *import pylab as pylimport pyfits as pfimport healpy as hpfrom astropy.io import fitsfrom scipy.special import legendrefrom scipy.special import eval_legendreimport numpy.ma as maimport scipy.special as spimport multiprocessing as mpfrom multiprocessing import Poolfrom bfield_functions_cat import *pwd_data = '/Users/arielamaral/Documents/AST430/Data/'hknot=70.2cosmo1=cosmo.FlatLambdaCDM(H0=hknot,Om0=.308)pwd_plots = '/Users/arielamaral/Documents/AST430/Plots/'def distance_func_tessa3(coord_RM,coord_gal,rra_RM,rra_gal, kpc2deg_list, radii_list, z_bin_list):    #maximum radial bin:    t1=time.time()    r = np.amax(radii_list)#np.sort(radii_list)[-1] #measured in kpc - want rmax    print "Maximum value of radial bins (should be about 2,500 kpc): ", r    arcsec_per_kpc = cosmo1.arcsec_per_kpc_comoving(0.1).value #number of arcseconds per kpc    #something is wrong with this kpc conversion    r_deg = (r * arcsec_per_kpc)/3600.    #coord_RM=SkyCoord(RM_RA*u.deg,RM_Dec*u.deg,frame='fk5')    #coord_gal=SkyCoord(gal_RA*u.deg,gal_Dec*u.deg,frame='fk5')    #rra_RM=coord_RM.ra.wrap_at(180*u.degree).value    #rra_gal=coord_gal.ra.wrap_at(180*u.degree).value    dist_matrix_deg = []    dist_matrix_kpc = []    dist_indeces = [] #keeps tracck of which sources in the original gal index are in the dist matrix    dist_z_split = [] #which redshift slice is each in?    gal_Dec=coord_gal.dec.deg    gal_RA=coord_gal.ra.deg    print "number of sources we have to make a distance matrix for: ", len(rra_RM)    #t2=time.time()    for i in range(len(rra_RM)):        #print i,len(RM_RA)        if (i % 500 == 0) & (i!=0):            print "RM source we're on... ", i,(time.time()-t1)/60.,np.concatenate(np.array(dist_matrix_kpc)).size        RA_min = coord_RM.ra[i].deg - r_deg        RA_max = coord_RM.ra[i].deg + r_deg        Dec_min = coord_RM.dec[i].deg - r_deg        Dec_max = coord_RM.dec[i].deg + r_deg        #t3=time.time()        #ind_gal_RA = np.where((RA_min < gal_RA) & (gal_RA <  RA_max))[0] #all galaxies which fall in the RA range        #ind_gal_Dec = np.where((Dec_min < gal_Dec) & (gal_Dec < Dec_max))[0] #all galaxies which fall in the Dec range        #gal_in_r_ind = np.union1d(ind_gal_RA,ind_gal_Dec)  #all galaxies which fall in both RA and Dec range        if RA_min<0:            #print 'hi1'            gal_in_r_ind = np.argwhere((RA_min < rra_gal) & (rra_gal <  RA_max) & (Dec_min < gal_Dec) & (gal_Dec < Dec_max))[:,0]  #all galaxies which fall in both RA and Dec range            separation = np.sqrt(((rra_RM[i]-rra_gal[gal_in_r_ind])*cos(coord_RM.dec[i].rad))**2+(coord_RM.dec[i].deg-gal_Dec[gal_in_r_ind])**2)        if RA_max>360:            #print 'hi2'            RA_min = rra_RM[i] - r_deg            RA_max = rra_RM[i] + r_deg            gal_in_r_ind = np.argwhere((RA_min < rra_gal) & (rra_gal <  RA_max) &(Dec_min < gal_Dec) & (gal_Dec < Dec_max))[:,0]            separation = np.sqrt(((rra_RM[i]-rra_gal[gal_in_r_ind])*cos(coord_RM.dec[i].rad))**2+(coord_RM.dec[i].deg-gal_Dec[gal_in_r_ind])**2)        if (RA_min>0)&(RA_max<360):            #print 'hi3'            gal_in_r_ind = np.argwhere((RA_min < gal_RA) & (gal_RA <  RA_max) &(Dec_min < gal_Dec) & (gal_Dec < Dec_max))[:,0]            separation = np.sqrt(((coord_RM.ra[i].deg-gal_RA[gal_in_r_ind])*cos(coord_RM.dec[i].rad))**2+(coord_RM.dec[i].deg-gal_Dec[gal_in_r_ind])**2)        #t4=time.time()        #lists of all the RA/Dec of the galaxies which fall within this postage stamp        #gal_RA_in_r = gal_RA[gal_in_r_ind]        #gal_Dec_in_r = gal_Dec[gal_in_r_ind]        gal_sep_in_r = kpc2deg_list[gal_in_r_ind]        #now we want to calculate the distances between every galaxy in here and the RM source                        #using skycoord values makes it easier to calculate separations        #distance in degrees        #separation = np.array(coord_RM[i].separation(coord_gal[gal_in_r_ind]).value, dtype = float)        dist_matrix_deg.append(separation) #distances from each galaxy to that RM source        dist_matrix_kpc.append(separation/gal_sep_in_r)                dist_indeces.append(gal_in_r_ind)                dist_z_split.append(z_bin_list[gal_in_r_ind])    t5=time.time()    print t5-t1#,t5-t2,t5-t4,t4-t3,t3-t2,t2-t1    return np.array(dist_matrix_deg), np.array(dist_matrix_kpc), np.array(dist_indeces), np.array(dist_z_split)def distance_func(ll):    #maximum radial bin:    #t1=time.time()    #r = np.amax(radii_list)#np.sort(radii_list)[-1] #measured in kpc - want rmax    #print "Maximum value of radial bins (should be about 2,500 kpc): ", r    #arcsec_per_kpc = cosmo1.arcsec_per_kpc_comoving(0.1).value #number of arcseconds per kpc    #something is wrong with this kpc conversion    r_deg = ll[0]#(r * arcsec_per_kpc)/3600.    coord_RM=ll[1]    coord_gal=ll[2]    rra_RM=ll[3]    rra_gal=ll[4]    kpc2deg_list=ll[5]    z_bin_list=ll[6]    #coord_RM=SkyCoord(RM_RA*u.deg,RM_Dec*u.deg,frame='fk5')    #coord_gal=SkyCoord(gal_RA*u.deg,gal_Dec*u.deg,frame='fk5')    #rra_RM=coord_RM.ra.wrap_at(180*u.degree).value    #rra_gal=coord_gal.ra.wrap_at(180*u.degree).value    dist_matrix_deg = []    dist_matrix_kpc = []    dist_indeces = [] #keeps tracck of which sources in the original gal index are in the dist matrix    dist_z_split = [] #which redshift slice is each in?    gal_Dec=coord_gal.dec.deg    gal_RA=coord_gal.ra.deg    #print "number of sources we have to make a distance matrix for: ", len(rra_RM)    #t2=time.time()    for i in range(len(rra_RM)):        #print i,len(RM_RA)        #if (i % 500 == 0) & (i!=0):        #    print "RM source we're on... ", i,(time.time()-t1)/60.,np.concatenate(np.array(dist_matrix_kpc)).size        RA_min = coord_RM.ra[i].deg - r_deg        RA_max = coord_RM.ra[i].deg + r_deg        Dec_min = coord_RM.dec[i].deg - r_deg        Dec_max = coord_RM.dec[i].deg + r_deg        #t3=time.time()        #ind_gal_RA = np.where((RA_min < gal_RA) & (gal_RA <  RA_max))[0] #all galaxies which fall in the RA range        #ind_gal_Dec = np.where((Dec_min < gal_Dec) & (gal_Dec < Dec_max))[0] #all galaxies which fall in the Dec range        #gal_in_r_ind = np.union1d(ind_gal_RA,ind_gal_Dec)  #all galaxies which fall in both RA and Dec range        if RA_min<0:            #print 'hi1'            gal_in_r_ind = np.argwhere((RA_min < rra_gal) & (rra_gal <  RA_max) & (Dec_min < gal_Dec) & (gal_Dec < Dec_max))[:,0]  #all galaxies which fall in both RA and Dec range            separation = np.sqrt(((rra_RM[i]-rra_gal[gal_in_r_ind])*cos(coord_RM.dec[i].rad))**2+(coord_RM.dec[i].deg-gal_Dec[gal_in_r_ind])**2)        if RA_max>360:            #print 'hi2'            RA_min = rra_RM[i] - r_deg            RA_max = rra_RM[i] + r_deg            gal_in_r_ind = np.argwhere((RA_min < rra_gal) & (rra_gal <  RA_max) &(Dec_min < gal_Dec) & (gal_Dec < Dec_max))[:,0]            separation = np.sqrt(((rra_RM[i]-rra_gal[gal_in_r_ind])*cos(coord_RM.dec[i].rad))**2+(coord_RM.dec[i].deg-gal_Dec[gal_in_r_ind])**2)        if (RA_min>0)&(RA_max<360):            #print 'hi3'            gal_in_r_ind = np.argwhere((RA_min < gal_RA) & (gal_RA <  RA_max) &(Dec_min < gal_Dec) & (gal_Dec < Dec_max))[:,0]            separation = np.sqrt(((coord_RM.ra[i].deg-gal_RA[gal_in_r_ind])*cos(coord_RM.dec[i].rad))**2+(coord_RM.dec[i].deg-gal_Dec[gal_in_r_ind])**2)        #t4=time.time()        #lists of all the RA/Dec of the galaxies which fall within this postage stamp        #gal_RA_in_r = gal_RA[gal_in_r_ind]        #gal_Dec_in_r = gal_Dec[gal_in_r_ind]        gal_sep_in_r = kpc2deg_list[gal_in_r_ind]        #now we want to calculate the distances between every galaxy in here and the RM source                        #using skycoord values makes it easier to calculate separations        #distance in degrees        #separation = np.array(coord_RM[i].separation(coord_gal[gal_in_r_ind]).value, dtype = float)        dist_matrix_deg.append(separation) #distances from each galaxy to that RM source        dist_matrix_kpc.append(separation/gal_sep_in_r)                dist_indeces.append(gal_in_r_ind)                dist_z_split.append(z_bin_list[gal_in_r_ind])    #bb=[]    return np.array(dist_matrix_deg), np.array(dist_matrix_kpc), np.array(dist_indeces), np.array(dist_z_split)def distance_func_tessa4(coord_RM,coord_gal,rra_RM,rra_gal, kpc2deg_list, radii_list, z_bin_list,nthreads=1):    r = np.amax(radii_list)#np.sort(radii_list)[-1] #measured in kpc - want rmax    print "Maximum value of radial bins (should be about 2,500 kpc): ", r    print nthreads    arcsec_per_kpc = cosmo1.arcsec_per_kpc_comoving(0.1).value #number of arcseconds per kpc    #something is wrong with this kpc conversion    t1=time.time()    r_deg = (r * arcsec_per_kpc)/3600.    if nthreads>1:        ll=[]        bns=np.linspace(0,rra_RM.size,5,dtype=int)        bns[4]=rra_RM.size+1        for k in range(4):            ll.append([r_deg,coord_RM[bns[k]:bns[k+1]],coord_gal,rra_RM[bns[k]:bns[k+1]],rra_gal,kpc2deg_list,z_bin_list])        if __name__ == 'dist_matrix_code':            pool1 = Pool(processes=nthreads)            bb=pool1.map(distance_func,ll)            pool1.close()            pool1.join()            aa1=[bb[0][0],bb[1][0],bb[2][0],bb[3][0]]            aa2=[bb[0][1],bb[1][1],bb[2][1],bb[3][1]]            aa3=[bb[0][2],bb[1][2],bb[2][2],bb[3][2]]            aa4=[bb[0][3],bb[1][3],bb[2][3],bb[3][3]]            aa=[np.concatenate(aa1),np.concatenate(aa2),np.concatenate(aa3),np.concatenate(aa4)]    if nthreads==1:        aa=distance_func_tessa3(coord_RM,coord_gal,rra_RM,rra_gal, kpc2deg_list, radii_list, z_bin_list)    print time.time()-t1,len(aa),len(aa[0]),len(aa[0][0])    return aa[0],aa[1],aa[2],aa[3]        def distance_func_tessa(RM_RA, RM_Dec, gal_RA, gal_Dec, kpc2deg_list, radii_list, z_bin_list):    #maximum radial bin:    t1=time.time()    r = np.amax(radii_list)#np.sort(radii_list)[-1] #measured in kpc - want rmax    print "Maximum value of radial bins (should be about 2,500 kpc): ", r    arcsec_per_kpc = cosmo1.arcsec_per_kpc_comoving(0.1).value #number of arcseconds per kpc    #something is wrong with this kpc conversion    r_deg = (r * arcsec_per_kpc)/3600.    coord_RM=SkyCoord(RM_RA*u.deg,RM_Dec*u.deg,frame='fk5')    coord_gal=SkyCoord(gal_RA*u.deg,gal_Dec*u.deg,frame='fk5')    rra_RM=coord_RM.ra.wrap_at(180*u.degree).value    rra_gal=coord_gal.ra.wrap_at(180*u.degree).value    dist_matrix_deg = []    dist_matrix_kpc = []    dist_indeces = [] #keeps tracck of which sources in the original gal index are in the dist matrix    dist_z_split = [] #which redshift slice is each in?    print "number of sources we have to make a distance matrix for: ", len(RM_RA)    t2=time.time()    for i in range(1952,1953):        #print i,len(RM_RA)        #if (i % 500 == 0) & (i!=0):        #    print "RM source we're on... ", i,(time.time()-t1)/60.,np.concatenate(np.array(dist_matrix_kpc)).size        RA_min = RM_RA[i] - r_deg        RA_max = RM_RA[i] + r_deg        Dec_min = RM_Dec[i] - r_deg        Dec_max = RM_Dec[i] + r_deg        t3=time.time()        print RA_min,RA_max,coord_RM.ra[i].deg        #ind_gal_RA = np.where((RA_min < gal_RA) & (gal_RA <  RA_max))[0] #all galaxies which fall in the RA range        #ind_gal_Dec = np.where((Dec_min < gal_Dec) & (gal_Dec < Dec_max))[0] #all galaxies which fall in the Dec range        #gal_in_r_ind = np.union1d(ind_gal_RA,ind_gal_Dec)  #all galaxies which fall in both RA and Dec range        if RA_min<0:            print 'hi1'            gal_in_r_ind = np.argwhere((RA_min < rra_gal) & (rra_gal <  RA_max) & (Dec_min < gal_Dec) & (gal_Dec < Dec_max))[:,0]  #all galaxies which fall in both RA and Dec range        if RA_max>360:            print 'hi2'            RA_min = rra_RM[i] - r_deg            RA_max = rra_RM[i] + r_deg            gal_in_r_ind = np.argwhere((RA_min < rra_gal) & (rra_gal <  RA_max) &(Dec_min < gal_Dec) & (gal_Dec < Dec_max))[:,0]        if (RA_min>0)&(RA_max<360):            print 'hi3'            gal_in_r_ind = np.argwhere((RA_min < gal_RA) & (gal_RA <  RA_max) &(Dec_min < gal_Dec) & (gal_Dec < Dec_max))[:,0]        t4=time.time()        #lists of all the RA/Dec of the galaxies which fall within this postage stamp        gal_RA_in_r = gal_RA[gal_in_r_ind]        gal_Dec_in_r = gal_Dec[gal_in_r_ind]        gal_sep_in_r = kpc2deg_list[gal_in_r_ind]        #now we want to calculate the distances between every galaxy in here and the RM source                        #using skycoord values makes it easier to calculate separations        #distance in degrees        separation = np.array(coord_RM[i].separation(coord_gal[gal_in_r_ind]).value, dtype = float)        dist_matrix_deg.append(separation) #distances from each galaxy to that RM source        dist_matrix_kpc.append(separation/gal_sep_in_r)                dist_indeces.append(gal_in_r_ind)                dist_z_split.append(z_bin_list[gal_in_r_ind])    t5=time.time()    print t5-t1,t5-t2,t5-t4,t4-t3,t3-t2,t2-t1    return np.array(dist_matrix_deg), np.array(dist_matrix_kpc), np.array(dist_indeces), np.array(dist_z_split)####### lets try to make this fasterdef distance_func_zbins(RM_RA, RM_Dec, kpc2deg_list, radii_list,  gal_RA_split, gal_Dec_split,z_bin_list, z_mean):    #maximum radial bin:    r = np.amax(radii_list)#np.sort(radii_list)[-1] #measured in kpc - want rmax    zbins = np.linspace(0.1,0.4,4)    dist_matrix_deg = [[] for i in range(len(RM_RA))]    dist_matrix_kpc = [[] for i in range(len(RM_RA))]    dist_matrix_kpc_alt = [[] for i in range(len(RM_RA))]    dist_indeces = [[] for i in range(len(RM_RA))] #keeps tracck of which sources in the original gal index are in the dist matrix    dist_z_split = [[] for i in range(len(RM_RA))] #which redshift slice is each in?    print "number of sources we have to make a distance matrix for: ", len(RM_RA)    for z in np.arange(0, len(zbins)):        print "z_mean for this bin: ", z_mean        #using the mean redshfit of the redshift bin        arcsec_per_kpc = cosmo1.arcsec_per_kpc_comoving(z_mean[z]).value #number of arcseconds per kpc        print "arcsec_per_kpc: ", arcsec_per_kpc        #galaxies in that zbin range:        gal_RA_in_z = gal_RA_split[z]        print gal_RA_in_z        gal_Dec_in_z = gal_Dec_split[z]        print gal_Dec_in_z        r_deg = (r * arcsec_per_kpc)/3600.        coord_RM=SkyCoord(RM_RA*u.deg,RM_Dec*u.deg,frame='fk5')        coord_gal=SkyCoord(gal_RA_in_z*u.deg,gal_Dec_in_z*u.deg,frame='fk5')        rra_RM=coord_RM.ra.wrap_at(180*u.degree).value        rra_gal=coord_gal.ra.wrap_at(180*u.degree).value        t1=time.time()        for i in range(len(RM_RA)):            RA_min = RM_RA[i] - r_deg            RA_max = RM_RA[i] + r_deg            Dec_min = RM_Dec[i] - r_deg            Dec_max = RM_Dec[i] + r_deg            if RA_min<0:                gal_in_r_ind = np.argwhere((RA_min < rra_gal) & (rra_gal <  RA_max) & (Dec_min < gal_Dec_in_z) & (gal_Dec_in_z < Dec_max))[:,0]  #all galaxies which fall in both RA and Dec range            if RA_max>360:                RA_min = rra_RM[i] - r_deg                RA_max = rra_RM[i] + r_deg                gal_in_r_ind = np.argwhere((RA_min < rra_gal) & (rra_gal <  RA_max) &(Dec_min < gal_Dec_in_z) & (gal_Dec_in_z < Dec_max))[:,0]            else:                gal_in_r_ind = np.argwhere((RA_min < gal_RA_in_z) & (gal_RA_in_z <  RA_max) &(Dec_min < gal_Dec_in_z) & (gal_Dec_in_z < Dec_max))[:,0]            #lists of all the RA/Dec of the galaxies which fall within this postage stamp            gal_RA_in_r = gal_RA_in_z[gal_in_r_ind]            gal_Dec_in_r = gal_Dec_in_z[gal_in_r_ind]            gal_sep_in_r = kpc2deg_list[gal_in_r_ind]            #now we want to calculate the distances between every galaxy in here and the RM source                                    #using skycoord values makes it easier to calculate separations            #distance in degrees            #appending to that specific RM source location in the distance matrices            separation = np.array(coord_RM[i].separation(coord_gal[gal_in_r_ind]).value, dtype = float)            dist_matrix_deg[i]+= list(separation) #distances from each galaxy to that RM source            dist_matrix_kpc[i] += list(separation/gal_sep_in_r)                        dist_indeces[i] += list(gal_in_r_ind)                        dist_z_split[i] += list(z_bin_list[gal_in_r_ind])    return np.array(dist_matrix_deg), np.array(dist_matrix_kpc), np.array(dist_indeces), np.array(dist_z_split)def distance_func_zbins_max(RM_RA, RM_Dec, kpc2deg_list, radii_list,  gal_RA_split, gal_Dec_split,z_bin_list, z_mean):    #maximum radial bin:    r = np.amax(radii_list)#np.sort(radii_list)[-1] #measured in kpc - want rmax    zbins = np.linspace(0.1,0.4,4)    dist_matrix_deg = [[] for i in range(len(RM_RA))]    dist_matrix_kpc = [[] for i in range(len(RM_RA))]    dist_matrix_kpc_alt = [[] for i in range(len(RM_RA))]    dist_indeces = [[] for i in range(len(RM_RA))] #keeps tracck of which sources in the original gal index are in the dist matrix    dist_z_split = [[] for i in range(len(RM_RA))] #which redshift slice is each in?    print "number of sources we have to make a distance matrix for: ", len(RM_RA)    for z in np.arange(0, len(zbins)):        print "z_bins[z]: ", zbins[z]        print "LOWER bound of redshift bin: ", zbins[z]        #using the lower bound of the redshift bin        arcsec_per_kpc = cosmo1.arcsec_per_kpc_comoving(zbins[z]).value #number of arcseconds per kpc        print "arcsec_per_kpc: ", arcsec_per_kpc        #galaxies in that zbin range:        gal_RA_in_z = gal_RA_split[z]        print gal_RA_in_z        gal_Dec_in_z = gal_Dec_split[z]        print gal_Dec_in_z        r_deg = (r * arcsec_per_kpc)/3600.        coord_RM=SkyCoord(RM_RA*u.deg,RM_Dec*u.deg,frame='fk5')        coord_gal=SkyCoord(gal_RA_in_z*u.deg,gal_Dec_in_z*u.deg,frame='fk5')        rra_RM=coord_RM.ra.wrap_at(180*u.degree).value        rra_gal=coord_gal.ra.wrap_at(180*u.degree).value        t1=time.time()        for i in range(len(RM_RA)):            RA_min = RM_RA[i] - r_deg            RA_max = RM_RA[i] + r_deg            Dec_min = RM_Dec[i] - r_deg            Dec_max = RM_Dec[i] + r_deg            if RA_min<0:                gal_in_r_ind = np.argwhere((RA_min < rra_gal) & (rra_gal <  RA_max) & (Dec_min < gal_Dec_in_z) & (gal_Dec_in_z < Dec_max))[:,0]  #all galaxies which fall in both RA and Dec range            if RA_max>360:                RA_min = rra_RM[i] - r_deg                RA_max = rra_RM[i] + r_deg                gal_in_r_ind = np.argwhere((RA_min < rra_gal) & (rra_gal <  RA_max) &(Dec_min < gal_Dec_in_z) & (gal_Dec_in_z < Dec_max))[:,0]            else:                gal_in_r_ind = np.argwhere((RA_min < gal_RA_in_z) & (gal_RA_in_z <  RA_max) &(Dec_min < gal_Dec_in_z) & (gal_Dec_in_z < Dec_max))[:,0]            #lists of all the RA/Dec of the galaxies which fall within this postage stamp            gal_RA_in_r = gal_RA_in_z[gal_in_r_ind]            gal_Dec_in_r = gal_Dec_in_z[gal_in_r_ind]            gal_sep_in_r = kpc2deg_list[gal_in_r_ind]            #now we want to calculate the distances between every galaxy in here and the RM source                                    #using skycoord values makes it easier to calculate separations            #distance in degrees            #appending to that specific RM source location in the distance matrices            separation = np.array(coord_RM[i].separation(coord_gal[gal_in_r_ind]).value, dtype = float)            dist_matrix_deg[i]+= list(separation) #distances from each galaxy to that RM source            dist_matrix_kpc[i] += list(separation/gal_sep_in_r)                        dist_indeces[i] += list(gal_in_r_ind)                        dist_z_split[i] += list(z_bin_list[gal_in_r_ind])    return np.array(dist_matrix_deg), np.array(dist_matrix_kpc), np.array(dist_indeces), np.array(dist_z_split)